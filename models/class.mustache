var sqlitewrapper = require("../Database/sqlite-wrapper.js")('{{{dbname}}}')
 
const schema{{classTitle}} = require('../Schemas/Schema-{{classTitle}}.json');

const jsf = require('json-schema-faker');
const faker = require('faker');
jsf.extend('faker', () => { return faker });

class {{classTitle}} {
 constructor (id,{{constructorArguments}}) {
     
    {{#classConstructor}}
    this.{{name}} = {{name}};
    {{/classConstructor}}  

    {{#classEnumerables}}
    Object.defineProperty(this,"{{name}}", { enumerable: false });
    {{/classEnumerables}} 
    {{#fkexists}}
    Object.defineProperty(this, "{{model}}_id", { enumerable: false, writable: true });
    {{/fkexists}} 
    Object.defineProperty(this,"id", { enumerable: false, writable: true });

}
static create() {
 return Object.assign(new {{classTitle}}(), jsf.generate(schema{{classTitle}}));
}
/////////////
static all (callback){
    sqlitewrapper.where("SELECT * FROM {{{classTitle}}}", [], {{classTitle}}, callback)
}
 
static get(id, callback){
    sqlitewrapper.where("SELECT * FROM {{{classTitle}}} WHERE id = ?", [id], {{classTitle}}, callback)
}
static delete(id, callback) {
    sqlitewrapper.run("DELETE FROM {{{classTitle}}} WHERE id = ?", [id], callback)
}
static many(model,id, callback){
    let tablename = ('{{classTitle}}' < model) ? '{{classTitle}}'+ "_" + model : model + "_" +'{{classTitle}}' ;
    sqlitewrapper.where("SELECT * FROM {{classTitle}} INNER JOIN  "+tablename+" ON "+tablename+".{{classTitle}}_id = {{classTitle}}.id WHERE  "+tablename+"."+model+"_id = ?", [id],{{classTitle}}, callback);
}

static top(property,order,limit,callback){
    sqlitewrapper.where("SELECT * FROM {{classTitle}} ORDER BY "+property+" "+order+" LIMIT "+limit, [], {{classTitle}}, callback);
}

save(callback){
    if(this.id){
        let attr = [];
      {{#classConstructor}} attr.push('{{name}} =  ?');{{/classConstructor}}
        let values = '{{{questionmark}}},'
        let params =  [{{#classConstructor}} this.{{name}} {{^last}},{{/last}} {{/classConstructor}}];
        let manymany = [];
        {{#fkexists}}
        if(this.{{model}}_id)  {
            if('{{type}}' == '1-M'){
            attr.push('{{model}}_id =  ?');
            values += '?,';
            params.push(this.{{model}}_id)
            }else if('{{type}}' == 'M-M'){
                if(Array.isArray(this.{{model}}_id)){
                    manymany.push({stmt:"INSERT INTO {{classT}} ({{classTitle}}_id, {{model}}_id) values "+ Array(this.{{model}}_id.length).fill("(?,?)").join(","), params: repeatValues(this.{{model}}_id, this.id)}); 
                }else{
                    manymany.push({stmt:"INSERT INTO {{classT}} ({{classTitle}}_id, {{model}}_id) values (?,?)",  params: [this.id, this.{{model}}_id]}); 
                }
            }
        }
        {{/fkexists}}
        params.push(this.id);
        values = values.slice(0, -1);
        var l = "UPDATE {{{classTitle}}} SET "+attr.join(',')+" WHERE id = ?";
        sqlitewrapper.run(l,params,()=>{
            if(manymany.length>0){
                aux(manymany,callback)
               
            }else{
                callback()
            }
            
        })
    }else{
        let attr = [];
{{#classConstructor}} attr.push( '{{name}}');{{/classConstructor}}
        let values = '{{{questionmark}}},'
        let params =  [{{#classConstructor}} this.{{name}} {{^last}},{{/last}} {{/classConstructor}}];
        let manymany = [];
        {{#fkexists}}
        if(this.{{model}}_id)  {
            if('{{type}}' == '1-M'){
            attr.push('{{model}}_id');
            values += '?,';
            params.push(this.{{model}}_id)
            }
        }
        {{/fkexists}}
        values = values.slice(0, -1);
        var l = "INSERT INTO {{{classTitle}}} ("+attr.join(',')+") values ("+values+")";
   
        sqlitewrapper.run(l,params,(res)=>{
            manymany = manyTo(this, attr, values, params , res.lastId);
            if(manymany.length>0){
                aux(manymany,callback)
               
            }else{
                callback()
            }
            
        })
  
     
   } 
   function aux(statements, callback){
        var call = callback;
        var elem = statements.pop()
        console.log(elem)
        if(statements.length>0) call =  aux(statements,callback)
        sqlitewrapper.run(elem['stmt'],elem['params'] , call)
    
   }
     function repeatValues(arr, stat){
        var arrFinal = []
       arr.forEach((elem)=>{
            arrFinal.push(stat);
            arrFinal.push(elem)
        })
        return arrFinal;
    }    
    
function manyTo(obj,attr, values, params , id){
    var manymany = []
        {{#fkexists}}
        if(obj.{{model}}_id)  {
           if('{{type}}' == 'M-M'){
                if(Array.isArray(obj.{{model}}_id)){
                    manymany.push({stmt:"INSERT INTO {{classT}} ({{classTitle}}_id, {{model}}_id) values "+ Array(obj.{{model}}_id.length).fill("(?,?)").join(","), params: repeatValues(obj.{{model}}_id, id)}); 
                }else{
                    manymany.push({stmt:"INSERT INTO {{classT}} ({{classTitle}}_id, {{model}}_id) values (?,?)",  params: [id, obj.{{model}}_id]}); 
                }
            }
        }
        {{/fkexists}}
        return manymany
    }
}
    
} 
 
module.exports = {{classTitle}}